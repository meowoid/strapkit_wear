#! /bin/bash

 # /*
 #  Copyright 2014 EnSens, LLC D/B/A Strap
 #  Portions derived from original source created by Apache Software Foundation.

 #    Licensed under the Apache License, Version 2.0 (the "License");
 #    you may not use this file except in compliance with the License.
 #    You may obtain a copy of the License at

 #        http://www.apache.org/licenses/LICENSE-2.0

 #    Unless required by applicable law or agreed to in writing, software
 #    distributed under the License is distributed on an "AS IS" BASIS,
 #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #    See the License for the specific language governing permissions and
 #    limitations under the License.
 # */

#
# create a StrapKit/Android-Wear project
#
# USAGE
#   ./create <path_to_new_project> <package_name> <project_name>
#
# EXAMPLE
#  ./create ~/Desktop/awesomesauce com.straphq.awesomesauce AwesomeSauce
#
set -e

function usage (){
  echo "Usage:"
  echo "    $0 --nometrics <path_to_new_project> <package_name> <project_name> [<project_template_dir>]"
  echo "    $0 --nometrics (optional): Do not include StrapMetrics"
  echo "    $0 <path_to_new_project>: Path to your new StrapKit Pebble project"
  echo "    $0 <package_name>: Package name, following reverse-domain style convention"
  echo "    $0 <project_name>: Project name"
  echo "    $0 <project_template_dir>: Path to project template (override)."
  exit 1
}

INCLUDE_METRICS=1
while [ $# -gt 0 ]; do
    case "$1" in
    --nometrics) INCLUDE_METRICS=0 ;;
    -*) echo "Unrecognized argument: $1" >&2; usage ;;
    *)
        if [[ -z "$PROJECT_PATH" ]]; then
            PROJECT_PATH="$1"
        elif [[ -z "$PACKAGE" ]]; then
            PACKAGE="$1"
        elif [[ -z "$PROJECT_NAME" ]]; then
            PROJECT_NAME="$1"
        elif [[ -z "$PROJECT_TEMPLATE_DIR" ]]; then
            PROJECT_TEMPLATE_DIR="$1"
        else
            echo "Too many arguments to $0". >&2
            usage
        fi
    esac
    shift
done

# check whether it is a proper create command (at least 3 arguments)
if [[ -z "$PROJECT_NAME" ]]; then
   usage
fi

# the two lines below are to get the current folder, and resolve symlinks
SCRIPT="$0"
# need this for relative symlinks
while [ -h "$SCRIPT" ] ; do
   SCRIPT=`readlink "$SCRIPT"`
done

# Capture location of script
BINDIR=$( cd "$( dirname "$SCRIPT" )" && pwd )

PROJECT_PARENT=$(dirname "$PROJECT_PATH")
PROJECT_TEMPLATE_DIR=${PROJECT_TEMPLATE_DIR:-"$BINDIR/templates/framework"}
SCRIPT_TEMPLATE_DIR=$BINDIR/templates/scripts
PACKAGE_DIR=$(echo $PACKAGE | sed 's/\./\//g' )


# check whether the project path exists and is not empty
if [ -d "$PROJECT_PATH" ]; then
   if [ "$(ls -1A "$PROJECT_PATH")" ]; then
      echo "\033[31mError: $PROJECT_PATH is not empty. Please specify an empty folder.\033[m"
      	   exit 1
	   fi
fi

#Ensure the parent directory exists so cp -r will not fail
if [ ! -d "$PROJECT_PARENT" ]; then
   echo "\033[31mError: $PROJECT_PARENT does not exist. Please specify an existing parent folder.\033[m"
   exit 1
fi

mkdir -p "$PROJECT_PATH"

# if [ $INCLUDE_METRICS == 1 ]; then
#cp -r "$PROJECT_TEMPLATE_DIR/__PROJECT_NAME__SM" "$PROJECT_PATH/$PROJECT_NAME"
# else
# cp -r "$PROJECT_TEMPLATE_DIR/__PROJECT_NAME__PEBBLEJS" "$PROJECT_PATH/$PROJECT_NAME"
# fi


R=$PROJECT_PATH/$PROJECT_NAME
# mv "$R/src/__PROJECT_NAME__PEBBLEJS.c" "$R/src/$PROJECT_NAME.c"

#"$BINDIR/replaces" "$R/appinfo.json"     __PROJECT_NAME__PEBBLEJS "$PROJECT_NAME"
#"$BINDIR/replaces" "$R/appinfo.json"     __UUID__ `uuidgen`

# Copy strapkit scripts
cp -r "$SCRIPT_TEMPLATE_DIR"/* "$PROJECT_PATH/"

# Create project directory
mkdir $R
# cp -r "$PROJECT_TEMPLATE_DIR"/* $R

# Copy non-edited directories
cp -r $PROJECT_TEMPLATE_DIR/{.idea,gradle,strapkit_lib} "$R/."

# Copy non-edited files
cp -r $PROJECT_TEMPLATE_DIR/{.gitignore,build.gradle,framework.iml,gradle.properties,gradlew,gradlew.bat,settings.gradle,strapkit.jks} "$R/."

# Setup Wear
mkdir -p "$R/wear"
cp -r $PROJECT_TEMPLATE_DIR/wear/{libs,.gitignore,build.gradle,proguard-rules.pro,wear.iml} "$R/wear/."
mkdir -p "$R/wear/src/main"
cp -r $PROJECT_TEMPLATE_DIR/wear/src/main/{res,AndroidManifest.xml} "$R/wear/src/main/."
mkdir -p "$R/wear/src/main/$PACKAGE_DIR"
cp -r $PROJECT_TEMPLATE_DIR/wear/src/main/java/com/straphq/strapkit/framework/* "$R/wear/src/main/$PACKAGE_DIR"

sed -e "s@com.straphq.strapkit.framework@$PACKAGE@g" "$R/wear/src/main/AndroidManifest.xml" > /tmp/out
cat /tmp/out >  "$R/wear/src/main/AndroidManifest.xml"


# Setup Mobile
mkdir -p "$R/mobile"
cp -r $PROJECT_TEMPLATE_DIR/mobile/{libs,.gitignore,build.gradle,proguard-rules.pro,mobile.iml} "$R/mobile/."
mkdir -p "$R/mobile/src/main"
cp -r $PROJECT_TEMPLATE_DIR/mobile/src/main/{assets,res,AndroidManifest.xml} "$R/mobile/src/main/."
mkdir -p "$R/mobile/src/main/$PACKAGE_DIR"
cp -r $PROJECT_TEMPLATE_DIR/mobile/src/main/java/com/straphq/strapkit/framework/* "$R/mobile/src/main/$PACKAGE_DIR"

echo "BINDIR $BINDIR"
echo "PROJECT_PATH $PROJECT_PATH"
echo "PROJECT_PARENT $PROJECT_PARENT"
echo "PROJECT_TEMPLATE_DIR $PROJECT_TEMPLATE_DIR"
echo "SCRIPT_TEMPLATE_DIR $SCRIPT_TEMPLATE_DIR"
echo "R $R"
